/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederatedDeploymentOverrideLister helps list FederatedDeploymentOverrides.
type FederatedDeploymentOverrideLister interface {
	// List lists all FederatedDeploymentOverrides in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedDeploymentOverride, err error)
	// FederatedDeploymentOverrides returns an object that can list and get FederatedDeploymentOverrides.
	FederatedDeploymentOverrides(namespace string) FederatedDeploymentOverrideNamespaceLister
	FederatedDeploymentOverrideListerExpansion
}

// federatedDeploymentOverrideLister implements the FederatedDeploymentOverrideLister interface.
type federatedDeploymentOverrideLister struct {
	indexer cache.Indexer
}

// NewFederatedDeploymentOverrideLister returns a new FederatedDeploymentOverrideLister.
func NewFederatedDeploymentOverrideLister(indexer cache.Indexer) FederatedDeploymentOverrideLister {
	return &federatedDeploymentOverrideLister{indexer: indexer}
}

// List lists all FederatedDeploymentOverrides in the indexer.
func (s *federatedDeploymentOverrideLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedDeploymentOverride, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedDeploymentOverride))
	})
	return ret, err
}

// FederatedDeploymentOverrides returns an object that can list and get FederatedDeploymentOverrides.
func (s *federatedDeploymentOverrideLister) FederatedDeploymentOverrides(namespace string) FederatedDeploymentOverrideNamespaceLister {
	return federatedDeploymentOverrideNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedDeploymentOverrideNamespaceLister helps list and get FederatedDeploymentOverrides.
type FederatedDeploymentOverrideNamespaceLister interface {
	// List lists all FederatedDeploymentOverrides in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedDeploymentOverride, err error)
	// Get retrieves the FederatedDeploymentOverride from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FederatedDeploymentOverride, error)
	FederatedDeploymentOverrideNamespaceListerExpansion
}

// federatedDeploymentOverrideNamespaceLister implements the FederatedDeploymentOverrideNamespaceLister
// interface.
type federatedDeploymentOverrideNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedDeploymentOverrides in the indexer for a given namespace.
func (s federatedDeploymentOverrideNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedDeploymentOverride, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedDeploymentOverride))
	})
	return ret, err
}

// Get retrieves the FederatedDeploymentOverride from the indexer for a given namespace and name.
func (s federatedDeploymentOverrideNamespaceLister) Get(name string) (*v1alpha1.FederatedDeploymentOverride, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federateddeploymentoverride"), name)
	}
	return obj.(*v1alpha1.FederatedDeploymentOverride), nil
}
