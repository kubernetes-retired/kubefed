/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederatedSecretPlacementLister helps list FederatedSecretPlacements.
type FederatedSecretPlacementLister interface {
	// List lists all FederatedSecretPlacements in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedSecretPlacement, err error)
	// FederatedSecretPlacements returns an object that can list and get FederatedSecretPlacements.
	FederatedSecretPlacements(namespace string) FederatedSecretPlacementNamespaceLister
	FederatedSecretPlacementListerExpansion
}

// federatedSecretPlacementLister implements the FederatedSecretPlacementLister interface.
type federatedSecretPlacementLister struct {
	indexer cache.Indexer
}

// NewFederatedSecretPlacementLister returns a new FederatedSecretPlacementLister.
func NewFederatedSecretPlacementLister(indexer cache.Indexer) FederatedSecretPlacementLister {
	return &federatedSecretPlacementLister{indexer: indexer}
}

// List lists all FederatedSecretPlacements in the indexer.
func (s *federatedSecretPlacementLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedSecretPlacement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedSecretPlacement))
	})
	return ret, err
}

// FederatedSecretPlacements returns an object that can list and get FederatedSecretPlacements.
func (s *federatedSecretPlacementLister) FederatedSecretPlacements(namespace string) FederatedSecretPlacementNamespaceLister {
	return federatedSecretPlacementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedSecretPlacementNamespaceLister helps list and get FederatedSecretPlacements.
type FederatedSecretPlacementNamespaceLister interface {
	// List lists all FederatedSecretPlacements in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedSecretPlacement, err error)
	// Get retrieves the FederatedSecretPlacement from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FederatedSecretPlacement, error)
	FederatedSecretPlacementNamespaceListerExpansion
}

// federatedSecretPlacementNamespaceLister implements the FederatedSecretPlacementNamespaceLister
// interface.
type federatedSecretPlacementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedSecretPlacements in the indexer for a given namespace.
func (s federatedSecretPlacementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedSecretPlacement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedSecretPlacement))
	})
	return ret, err
}

// Get retrieves the FederatedSecretPlacement from the indexer for a given namespace and name.
func (s federatedSecretPlacementNamespaceLister) Get(name string) (*v1alpha1.FederatedSecretPlacement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federatedsecretplacement"), name)
	}
	return obj.(*v1alpha1.FederatedSecretPlacement), nil
}
