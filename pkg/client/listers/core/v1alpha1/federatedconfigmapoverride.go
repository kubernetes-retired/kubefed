/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederatedConfigMapOverrideLister helps list FederatedConfigMapOverrides.
type FederatedConfigMapOverrideLister interface {
	// List lists all FederatedConfigMapOverrides in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedConfigMapOverride, err error)
	// FederatedConfigMapOverrides returns an object that can list and get FederatedConfigMapOverrides.
	FederatedConfigMapOverrides(namespace string) FederatedConfigMapOverrideNamespaceLister
	FederatedConfigMapOverrideListerExpansion
}

// federatedConfigMapOverrideLister implements the FederatedConfigMapOverrideLister interface.
type federatedConfigMapOverrideLister struct {
	indexer cache.Indexer
}

// NewFederatedConfigMapOverrideLister returns a new FederatedConfigMapOverrideLister.
func NewFederatedConfigMapOverrideLister(indexer cache.Indexer) FederatedConfigMapOverrideLister {
	return &federatedConfigMapOverrideLister{indexer: indexer}
}

// List lists all FederatedConfigMapOverrides in the indexer.
func (s *federatedConfigMapOverrideLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedConfigMapOverride, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedConfigMapOverride))
	})
	return ret, err
}

// FederatedConfigMapOverrides returns an object that can list and get FederatedConfigMapOverrides.
func (s *federatedConfigMapOverrideLister) FederatedConfigMapOverrides(namespace string) FederatedConfigMapOverrideNamespaceLister {
	return federatedConfigMapOverrideNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedConfigMapOverrideNamespaceLister helps list and get FederatedConfigMapOverrides.
type FederatedConfigMapOverrideNamespaceLister interface {
	// List lists all FederatedConfigMapOverrides in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedConfigMapOverride, err error)
	// Get retrieves the FederatedConfigMapOverride from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FederatedConfigMapOverride, error)
	FederatedConfigMapOverrideNamespaceListerExpansion
}

// federatedConfigMapOverrideNamespaceLister implements the FederatedConfigMapOverrideNamespaceLister
// interface.
type federatedConfigMapOverrideNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedConfigMapOverrides in the indexer for a given namespace.
func (s federatedConfigMapOverrideNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedConfigMapOverride, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedConfigMapOverride))
	})
	return ret, err
}

// Get retrieves the FederatedConfigMapOverride from the indexer for a given namespace and name.
func (s federatedConfigMapOverrideNamespaceLister) Get(name string) (*v1alpha1.FederatedConfigMapOverride, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federatedconfigmapoverride"), name)
	}
	return obj.(*v1alpha1.FederatedConfigMapOverride), nil
}
