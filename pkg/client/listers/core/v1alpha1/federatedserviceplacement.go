/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FederatedServicePlacementLister helps list FederatedServicePlacements.
type FederatedServicePlacementLister interface {
	// List lists all FederatedServicePlacements in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedServicePlacement, err error)
	// FederatedServicePlacements returns an object that can list and get FederatedServicePlacements.
	FederatedServicePlacements(namespace string) FederatedServicePlacementNamespaceLister
	FederatedServicePlacementListerExpansion
}

// federatedServicePlacementLister implements the FederatedServicePlacementLister interface.
type federatedServicePlacementLister struct {
	indexer cache.Indexer
}

// NewFederatedServicePlacementLister returns a new FederatedServicePlacementLister.
func NewFederatedServicePlacementLister(indexer cache.Indexer) FederatedServicePlacementLister {
	return &federatedServicePlacementLister{indexer: indexer}
}

// List lists all FederatedServicePlacements in the indexer.
func (s *federatedServicePlacementLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedServicePlacement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedServicePlacement))
	})
	return ret, err
}

// FederatedServicePlacements returns an object that can list and get FederatedServicePlacements.
func (s *federatedServicePlacementLister) FederatedServicePlacements(namespace string) FederatedServicePlacementNamespaceLister {
	return federatedServicePlacementNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FederatedServicePlacementNamespaceLister helps list and get FederatedServicePlacements.
type FederatedServicePlacementNamespaceLister interface {
	// List lists all FederatedServicePlacements in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.FederatedServicePlacement, err error)
	// Get retrieves the FederatedServicePlacement from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.FederatedServicePlacement, error)
	FederatedServicePlacementNamespaceListerExpansion
}

// federatedServicePlacementNamespaceLister implements the FederatedServicePlacementNamespaceLister
// interface.
type federatedServicePlacementNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FederatedServicePlacements in the indexer for a given namespace.
func (s federatedServicePlacementNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FederatedServicePlacement, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FederatedServicePlacement))
	})
	return ret, err
}

// Get retrieves the FederatedServicePlacement from the indexer for a given namespace and name.
func (s federatedServicePlacementNamespaceLister) Get(name string) (*v1alpha1.FederatedServicePlacement, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("federatedserviceplacement"), name)
	}
	return obj.(*v1alpha1.FederatedServicePlacement), nil
}
