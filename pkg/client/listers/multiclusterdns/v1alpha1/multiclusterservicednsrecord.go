/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/multiclusterdns/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiClusterServiceDNSRecordLister helps list MultiClusterServiceDNSRecords.
type MultiClusterServiceDNSRecordLister interface {
	// List lists all MultiClusterServiceDNSRecords in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterServiceDNSRecord, err error)
	// MultiClusterServiceDNSRecords returns an object that can list and get MultiClusterServiceDNSRecords.
	MultiClusterServiceDNSRecords(namespace string) MultiClusterServiceDNSRecordNamespaceLister
	MultiClusterServiceDNSRecordListerExpansion
}

// multiClusterServiceDNSRecordLister implements the MultiClusterServiceDNSRecordLister interface.
type multiClusterServiceDNSRecordLister struct {
	indexer cache.Indexer
}

// NewMultiClusterServiceDNSRecordLister returns a new MultiClusterServiceDNSRecordLister.
func NewMultiClusterServiceDNSRecordLister(indexer cache.Indexer) MultiClusterServiceDNSRecordLister {
	return &multiClusterServiceDNSRecordLister{indexer: indexer}
}

// List lists all MultiClusterServiceDNSRecords in the indexer.
func (s *multiClusterServiceDNSRecordLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterServiceDNSRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterServiceDNSRecord))
	})
	return ret, err
}

// MultiClusterServiceDNSRecords returns an object that can list and get MultiClusterServiceDNSRecords.
func (s *multiClusterServiceDNSRecordLister) MultiClusterServiceDNSRecords(namespace string) MultiClusterServiceDNSRecordNamespaceLister {
	return multiClusterServiceDNSRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiClusterServiceDNSRecordNamespaceLister helps list and get MultiClusterServiceDNSRecords.
type MultiClusterServiceDNSRecordNamespaceLister interface {
	// List lists all MultiClusterServiceDNSRecords in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MultiClusterServiceDNSRecord, err error)
	// Get retrieves the MultiClusterServiceDNSRecord from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MultiClusterServiceDNSRecord, error)
	MultiClusterServiceDNSRecordNamespaceListerExpansion
}

// multiClusterServiceDNSRecordNamespaceLister implements the MultiClusterServiceDNSRecordNamespaceLister
// interface.
type multiClusterServiceDNSRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiClusterServiceDNSRecords in the indexer for a given namespace.
func (s multiClusterServiceDNSRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiClusterServiceDNSRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiClusterServiceDNSRecord))
	})
	return ret, err
}

// Get retrieves the MultiClusterServiceDNSRecord from the indexer for a given namespace and name.
func (s multiClusterServiceDNSRecordNamespaceLister) Get(name string) (*v1alpha1.MultiClusterServiceDNSRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multiclusterservicednsrecord"), name)
	}
	return obj.(*v1alpha1.MultiClusterServiceDNSRecord), nil
}
