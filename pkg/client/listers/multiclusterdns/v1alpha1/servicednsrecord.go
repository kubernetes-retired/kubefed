/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/multiclusterdns/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceDNSRecordLister helps list ServiceDNSRecords.
type ServiceDNSRecordLister interface {
	// List lists all ServiceDNSRecords in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceDNSRecord, err error)
	// ServiceDNSRecords returns an object that can list and get ServiceDNSRecords.
	ServiceDNSRecords(namespace string) ServiceDNSRecordNamespaceLister
	ServiceDNSRecordListerExpansion
}

// serviceDNSRecordLister implements the ServiceDNSRecordLister interface.
type serviceDNSRecordLister struct {
	indexer cache.Indexer
}

// NewServiceDNSRecordLister returns a new ServiceDNSRecordLister.
func NewServiceDNSRecordLister(indexer cache.Indexer) ServiceDNSRecordLister {
	return &serviceDNSRecordLister{indexer: indexer}
}

// List lists all ServiceDNSRecords in the indexer.
func (s *serviceDNSRecordLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceDNSRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceDNSRecord))
	})
	return ret, err
}

// ServiceDNSRecords returns an object that can list and get ServiceDNSRecords.
func (s *serviceDNSRecordLister) ServiceDNSRecords(namespace string) ServiceDNSRecordNamespaceLister {
	return serviceDNSRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceDNSRecordNamespaceLister helps list and get ServiceDNSRecords.
type ServiceDNSRecordNamespaceLister interface {
	// List lists all ServiceDNSRecords in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceDNSRecord, err error)
	// Get retrieves the ServiceDNSRecord from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ServiceDNSRecord, error)
	ServiceDNSRecordNamespaceListerExpansion
}

// serviceDNSRecordNamespaceLister implements the ServiceDNSRecordNamespaceLister
// interface.
type serviceDNSRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceDNSRecords in the indexer for a given namespace.
func (s serviceDNSRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceDNSRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceDNSRecord))
	})
	return ret, err
}

// Get retrieves the ServiceDNSRecord from the indexer for a given namespace and name.
func (s serviceDNSRecordNamespaceLister) Get(name string) (*v1alpha1.ServiceDNSRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("servicednsrecord"), name)
	}
	return obj.(*v1alpha1.ServiceDNSRecord), nil
}
