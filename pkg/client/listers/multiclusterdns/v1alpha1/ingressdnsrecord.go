/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubernetes-sigs/federation-v2/pkg/apis/multiclusterdns/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IngressDNSRecordLister helps list IngressDNSRecords.
type IngressDNSRecordLister interface {
	// List lists all IngressDNSRecords in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.IngressDNSRecord, err error)
	// IngressDNSRecords returns an object that can list and get IngressDNSRecords.
	IngressDNSRecords(namespace string) IngressDNSRecordNamespaceLister
	IngressDNSRecordListerExpansion
}

// ingressDNSRecordLister implements the IngressDNSRecordLister interface.
type ingressDNSRecordLister struct {
	indexer cache.Indexer
}

// NewIngressDNSRecordLister returns a new IngressDNSRecordLister.
func NewIngressDNSRecordLister(indexer cache.Indexer) IngressDNSRecordLister {
	return &ingressDNSRecordLister{indexer: indexer}
}

// List lists all IngressDNSRecords in the indexer.
func (s *ingressDNSRecordLister) List(selector labels.Selector) (ret []*v1alpha1.IngressDNSRecord, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressDNSRecord))
	})
	return ret, err
}

// IngressDNSRecords returns an object that can list and get IngressDNSRecords.
func (s *ingressDNSRecordLister) IngressDNSRecords(namespace string) IngressDNSRecordNamespaceLister {
	return ingressDNSRecordNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IngressDNSRecordNamespaceLister helps list and get IngressDNSRecords.
type IngressDNSRecordNamespaceLister interface {
	// List lists all IngressDNSRecords in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.IngressDNSRecord, err error)
	// Get retrieves the IngressDNSRecord from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.IngressDNSRecord, error)
	IngressDNSRecordNamespaceListerExpansion
}

// ingressDNSRecordNamespaceLister implements the IngressDNSRecordNamespaceLister
// interface.
type ingressDNSRecordNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IngressDNSRecords in the indexer for a given namespace.
func (s ingressDNSRecordNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IngressDNSRecord, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IngressDNSRecord))
	})
	return ret, err
}

// Get retrieves the IngressDNSRecord from the indexer for a given namespace and name.
func (s ingressDNSRecordNamespaceLister) Get(name string) (*v1alpha1.IngressDNSRecord, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ingressdnsrecord"), name)
	}
	return obj.(*v1alpha1.IngressDNSRecord), nil
}
